#################################################################################################################
#
#  My filament handling macros.  Adapated from FLAP.
#
#################################################################################################################

[gcode_macro _USER_VARIABLES]
variable_nozzle_purge_length    :50    # filament extrude amount during load sequence, hotend purge from old filament, default is 200
variable_nozzle_purge_speed     :450    # filament extrude speed in mm/min adjust this value lower if flow is too high and extruder skips during loading, default is 300
variable_unload_distance        :65     # filament retract distance for unload procedure. this length shall be long enough to extract the filament above the drive gears
variable_cooldown_load_temp     :150    # temp to cooldown to after loading. The temp should be set around 185 to prevent oozing, but keep the hot end close to print temp
variable_disable_runnout        :False  # disable runnout by setting this variable True
variable_enable_beep            :True  # uses M300 sound feature, set it True to enable
variable_continuous_beep_runout :False  # (Not used) on runout or color change, the printer will beep continuously until you take action
variable_heat_bed               :False   # heats the heated bed during filament load. This might be handy if you are doing to print right away. 
variable_auto_resume            :True   # automatically resumes print after runout or colorchange
variable_park_position_x        :150     # edit your X parking position here for pause macro triggered by runnout
variable_park_position_y        :10     # edit your Y parking position here for pause macro triggered by runnout
variable_park_lift_z            :10     # edit your Z lift amount for parking position here, default is 10
variable_park_retraction        :1      # edit your retraction amount for parking, default is 1

## NO TOUCH, STATE VARIABLES ##
variable_paused_state: 0
variable_runout_state: 0
variable_disable_autounload     :False  
variable_disable_autoload       :False  
variable_load_retry: 0
variable_color_change_state: 0

gcode:

[gcode_macro _TEMP_VARIABLES]
# Add or remove your own materials here. Format: ["ABS",240,220,100] ["Material",Load Temp, Min Load Temp, Bed Temp]
variable_materials: [["ABS",240,220,100],["ASA",260,240,105],["PETG",230,210,85],["PLA",215,200,60],
                    ["FLEX",215,200,60],["PC",260,240,105],["PA",290,280,50]]
# NO TOUCH #
variable_current_load_temp: 0
variable_current_min_load_temp: 0
variable_current_bed_temp: 0

gcode:

[respond]
default_type: echo

[force_move]
enable_force_move: True

# Filament Unload macro - Comment this out if you are not using an unload button. Instead run "UNLOAD_FILAMENT" Macro manually from Mainsail.
#[gcode_button _filament_unload]
#pin: ^!gpio0 # <- Assign your pin here
#release_gcode:  # filament unload procedure   
#  UNLOAD_FILAMENT
#press_gcode: # do not add any macro call here

##################################################
# FILAMENT LOAD

[gcode_macro LOAD_FILAMENT] # Entry point for loading filament, calls _LOAD_PROMPT if not printing and there is filament in the sensor, also KlipperScreen Macro
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLES'] %}
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %}
  {% set load = printer['gcode_macro _filament_load'] %}
  G4 P250 # Wait 0.25 seconds 
  {% if (printer.print_stats.state != "printing") %}
    {% if (printer['filament_switch_sensor SFS_T0_SWITCH'].filament_detected|lower == 'true')%} # We only want to load filament if the filament sensor reports true. This prevents a lot of problems :)
      {% if (user.paused_state == 0) %} 
        {% if (load.loadbusy == 0) %} # This prevents activating _LOAD_PROMPT when taking out filament during unload.
          _LOAD_PROMPT
        {% endif %}
      {% endif %}
    {% else %}
      M118 Cannot load when there is no filament inserted!
    {% endif %}
  {% else %}    
    M118 Printing! Can't load filament right now!    
  {% endif %} 
  UPDATE_DELAYED_GCODE ID=_clear_changebusy DURATION=2

[gcode_macro _LOAD_PROMPT] # Prompts user for Filament Type, calls _LOAD_SET_TEMP_VARIABLES and passes the INDEX of the chosen material
gcode:
  {% set materials = printer['gcode_macro _TEMP_VARIABLES'].materials %}
  RESPOND TYPE=command MSG="action:prompt_begin Preheat for Load"
  RESPOND TYPE=command MSG="action:prompt_text Insert filament and choose a material"
  RESPOND TYPE=command MSG="action:prompt_button_group_start"
  {% for idx in range(0, materials|length) %} # Iterate through array of materials and create a button for each
    {% set s = "action:prompt_button " + materials[idx][0] + ' - ' + materials[idx][1]|string + '/' + materials[idx][3]|string + "|_LOAD_SET_TEMP_VARIABLES INDEX='" + idx|string + "'" %} # Thank you Aubey!
    RESPOND TYPE=command MSG="{s}"
  {% endfor %}
  RESPOND TYPE=command MSG="action:prompt_button_group_end"
  RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _LOAD_SET_TEMP_VARIABLES] # Sets _TEMP_VARIABLES variables to match selected material, saves to disk, then calls _filament_load
gcode:
  {% set index = params.INDEX|int %}
  {% set material = printer['gcode_macro _TEMP_VARIABLES'].materials[index] %}
  
  RESPOND TYPE=command MSG=action:prompt_end # Close the prompt
    
  M118 Filament Macro: {material[0]} Selected
  SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=current_load_temp VALUE={material[1]} 
  SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=current_min_load_temp VALUE={material[2]} 
  SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=current_bed_temp VALUE={material[3]}
  # Save https://www.klipper3d.org/Command_Templates.html#save-variables-to-disk
  # This is the only point where variables are written to disk. This is kept to a minimum. 
  SAVE_VARIABLE VARIABLE=current_load_temp VALUE={material[1]} 
  SAVE_VARIABLE VARIABLE=current_min_load_temp VALUE={material[2]} 
  SAVE_VARIABLE VARIABLE=current_bed_temp VALUE={material[3]}
  _filament_load

[gcode_macro _filament_load] # Checks hotend temp, heats to loading temp, then calls _filament_purge
variable_loadbusy: 0
gcode:    
  {% set user = printer['gcode_macro _USER_VARIABLES'] %}
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %} # temp.current_load_temp temp.current_min_load_temp temp.current_bed_temp
  {% if loadbusy == 0 %} # requires [virtual_sdcard] 
    SET_GCODE_VARIABLE MACRO=_filament_load VARIABLE=loadbusy VALUE=1
    SET_GCODE_VARIABLE MACRO=_filament_unload VARIABLE=unloadbusy VALUE=1
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp.current_load_temp} # set user defined load temperature      
    M118 Filament Macros: Hotend heating! 
    {% if (user.enable_beep|lower == 'true') %} 
      M300 # beep sound
    {% endif %}
    _filament_purge
  {% else %}
    M118 Filament Macros: Filament already loaded!    
  {% endif %} 

[gcode_macro _filament_purge] # Purges filament, then calls _PURGE_PROMPT
gcode:
  RESPOND TYPE=command MSG=action:prompt_end # Close prompt
  {% set user = printer['gcode_macro _USER_VARIABLES'] %}
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %}
  M118 Waiting for Hotend...  
  M82           # set extruder to absolute mode
  G92 E0        # Set extruder to 0
  G4 P1500      # wait for 1.5 seconds
  FORCE_MOVE STEPPER=extruder DISTANCE=15 VELOCITY=10 ACCEL=1000  # load filament inside the gears force move needs to be enabled    
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp.current_load_temp} # wait for reaching set temperature
  M118 Filament now loading
  G1 E{user.nozzle_purge_length} F{user.nozzle_purge_speed} # extrude preconfigured purge length
  M400 # wait to complete nozzle purge
  _PURGE_PROMPT

[gcode_macro _PURGE_PROMPT] # Calls _PURGE_FINISH, _TEMP_CHECK_PURGE, or _RETRY_LOAD_TEMP based on user input
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin Loading Filament"
  RESPOND TYPE=command MSG="action:prompt_text Is the filament loaded correctly?"
  RESPOND TYPE=command MSG="action:prompt_footer_button YES|_PURGE_FINISH|primary"
  RESPOND TYPE=command MSG="action:prompt_footer_button PURGE MORE|_TEMP_CHECK_PURGE"
  RESPOND TYPE=command MSG="action:prompt_footer_button RETRY|_RETRY_LOAD_TEMP" # unloads and loads again
  RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _PURGE_FINISH] # Sets temp to cooldown_load_temp if not runout not true, else calls RESUME
gcode:
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %} 
  {% set user = printer['gcode_macro _USER_VARIABLES'] %}
  RESPOND TYPE=command MSG=action:prompt_end # Close Prompt
  UPDATE_DELAYED_GCODE ID=_clear_unloadbusy DURATION=2 # Need to run this
  M118 Filament Macros: Filament load complete!
  {% if user.runout_state == 0 %}
    M118 Filament Macros: Setting Extruder temp to: {user.cooldown_load_temp}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={user.cooldown_load_temp}
  {% endif %}
  {% if user.runout_state == 1 %}
    {% if (user.auto_resume|lower == 'true') %} 
      M118 Filament Macros: Resuming Print
      RESUME
    {% endif %}
  {% endif %}

[gcode_macro _TEMP_CHECK_PURGE]  # Checks hotend temps, then calls _filament_purge
gcode:
  RESPOND TYPE=command MSG=action:prompt_end
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %} 
  M118 Filament Macros: Checking if extruder is ready...
  {% if(printer.extruder.target != temp.current_load_temp) %}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp.current_load_temp}
    M118 Filament Macros: Hotend reheating!
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp.current_load_temp}
    M118 Filament Macros: Hotend ready!
  {% else %} 
    _filament_purge
    M118 Filament Macros: Hotend heated, purging...
  {% endif %}

[gcode_macro _RETRY_LOAD_TEMP] # Checks hotend temps, then call _RETRY_LOAD
gcode:
  RESPOND TYPE=command MSG=action:prompt_end
  SET_GCODE_VARIABLE MACRO=_filament_unload VARIABLE=unloadbusy VALUE=0 # I dunno why, but if it works...
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=load_retry VALUE=1
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %}
  M118 Filament Macros: Checking if extruder is ready...
  {% if (printer.extruder.target == 0) %}
    M118 Filament Macros: Hotend not heated, reheating...
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp.current_load_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp.current_load_temp}
    M118 Filament Macros: Hotend heated
    _RETRY_LOAD
  {% else %} 
    _RETRY_LOAD
  {% endif %}

[gcode_macro _RETRY_LOAD] # calls UNLOAD_FILAMENT to try again
gcode:
  RESPOND TYPE=command MSG=action:prompt_end
  M118 Filament Macros: Unloading...
  UNLOAD_FILAMENT

# END FILAMENT LOAD
#####################################################
# FILAMENT UNLOAD

[gcode_macro UNLOAD_FILAMENT] # Entry point for Unload.  If we know the filament temps, calls _filament_unload, if not call _UNLOAD_PROMPT
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLES'] %}
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %}
  {% set saved = printer.save_variables.variables %}
  {% if (printer.print_stats.state != "printing") %} # Make sure the printer is not printing
    {% if temp.current_load_temp == 0 %} # If we don't have the material selected stored, we need to ask the user.
      _UNLOAD_PROMPT
      # SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=current_load_temp VALUE={saved.current_load_temp} 
      # SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=current_min_load_temp VALUE={saved.current_min_load_temp} 
      # SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=current_bed_temp VALUE={saved.current_bed_temp}
      # _filament_unload
    {% else %}
      _filament_unload
    {% endif %}
  {% else %}   
     M118 Filament Macros: Printing! Can't unload filament right now!
  {% endif %}

[gcode_macro _UNLOAD_PROMPT] # Thank you why_me!
gcode:
  {% set materials = printer['gcode_macro _TEMP_VARIABLES'].materials %}
  RESPOND TYPE=command MSG="action:prompt_begin Preheat for unload"
  RESPOND TYPE=command MSG="action:prompt_text  Which material are you unloading?"
  RESPOND TYPE=command MSG="action:prompt_button_group_start"
  {% for idx in range(0, materials|length) %}
    {% set s = "action:prompt_button " + materials[idx][0] + ' - ' + materials[idx][1]|string + '°C' + "|_UNLOAD_SET_TEMP_VARIABLES INDEX='" + idx|string + "'" %} # Thank you Aubey!
    RESPOND TYPE=command MSG="{s}"
  {% endfor %}
  RESPOND TYPE=command MSG="action:prompt_button_group_end"
  RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _UNLOAD_SET_TEMP_VARIABLES]
gcode:
  {% set index = params.INDEX|int %}
  {% set material = printer['gcode_macro _TEMP_VARIABLES'].materials[index] %}
  
  RESPOND TYPE=command MSG=action:prompt_end # Close the prompt
    
  M118 Filament Macros: {material[0]} Selected
  SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=current_load_temp VALUE={material[1]} 
  SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=current_min_load_temp VALUE={material[2]} 
  SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=current_bed_temp VALUE={material[3]}
  _filament_unload

[gcode_macro _filament_unload] 
variable_unloadbusy: 0
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLES'] %}
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %} # temp.current_load_temp temp.current_min_load_temp temp.current_bed_temp
  {% if unloadbusy == 0 %} # requires [virtual_sdcard]  
    SET_GCODE_VARIABLE MACRO=_filament_unload VARIABLE=unloadbusy VALUE=1
    SET_GCODE_VARIABLE MACRO=_filament_load VARIABLE=loadbusy VALUE=1
    {% if (user.enable_beep|lower == 'true') %} 
      M300 # beep sound
    {% endif %}
    M118 Filament Macros: Filament unloading!    
    M83
    G92 E0
    M118 Filament Macros: Hotend heating!
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp.current_load_temp} # restore user temp if it was set before loading
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp.current_min_load_temp} # wait for reaching configured unload temperature
    G0 E10 F500 # extruder 20mm of filament before extracting 
    G0 E-5 F3600 	#extract filament to cold end
    G4 P2000 # wait for two seconds
    G0 E6 F3600 # push the filament back 
    G0 E-10 F3600 	#extract filament to cold end
    G0 E-{user.unload_distance} F300	# continue extraction slow allow filament to be cooled enough before reaches the gears  
    M400 # wait to complete unload      
    {% if runout_state == 0 %} # Make sure we don't cooldown on a runout. That wouldn't be ideal. 
      M104 S0 T0
    {% endif %}
    _UNLOAD_COMPLETE_PROMPT
  {% else %}      
    M118 Filament Macros: Already Unloading!
  {% endif %}

[gcode_macro _UNLOAD_COMPLETE_PROMPT]
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin Unload Complete"
  RESPOND TYPE=command MSG="action:prompt_text Remove filament from printer and press Okay"
  RESPOND TYPE=command MSG="action:prompt_footer_button Okay|_UNLOAD_FINAL|primary"
  RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _UNLOAD_FINAL] 
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLES'] %}
  RESPOND TYPE=command MSG=action:prompt_end
  {% if (user.load_retry == 1) %}
    {% if (user.paused_state == 1) %} 
      LOAD_RETRY_PROMPT
    {% endif %}
  {% endif %}
  SET_GCODE_VARIABLE MACRO=_filament_load VARIABLE=loadbusy VALUE=0
  M118 Filament Macros: Filament unload complete!

[gcode_macro _LOAD_RETRY_PROMPT]
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin Retry Loading"
  RESPOND TYPE=command MSG="action:prompt_text Insert Filament and press OKAY to load"
  RESPOND TYPE=command MSG="action:prompt_footer_button Okay|_RETRY_LOAD2|primary"
  RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _RETRY_LOAD2] 
gcode:
  RESPOND TYPE=command MSG=action:prompt_end
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %}
  M118 Filament Macros: Checking if extruder is ready...
  {% if (printer.extruder.target == 0) %}
    M118 Filament Macros: Hotend not heated, reheating...
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp.current_load_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp.current_load_temp}
    M118 Filament Macros: Hotend heated
    SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=load_retry VALUE=0
    _filament_load
  {% else %} 
    SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=load_retry VALUE=0
    _filament_load
  {% endif %}

# END FILAMENT UNLOAD
#############################################
# FILAMENT RUNOUT

[gcode_macro FILAMENT_RUNOUT]
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLES'] %}  
  {% if (printer.print_stats.state == "printing") %}      
    {% if(user.disable_runnout|lower == 'false') %}
      _runout_change_start
    {% else %}
      M118 Filament Macros: Filament runnout is disabled in the user config file!   
    {% endif %}     
  {% endif %} 
  UPDATE_DELAYED_GCODE ID=_clear_loadbusy DURATION=2
  UPDATE_DELAYED_GCODE ID=_clear_unloadbusy DURATION=2  

[gcode_macro _runout_change_start]
variable_changebusy: 0
variable_temp_target: 0
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLES'] %}
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %}
  {% if changebusy == 0 %}
    PAUSE # call printer pause macro      
    SET_GCODE_VARIABLE MACRO=_runout_change_start VARIABLE=changebusy VALUE=1 
    M118 Filament Macros: Filament runnout!
    {% if temp.current_load_temp == 0 %} # If we don't have the material temp stored, we grab the target extruder temp.
      SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=current_load_temp VALUE={printer.extruder.target}
      SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=current_min_load_temp VALUE={printer.extruder.target}
    {% endif %} 
    _RUNOUT_PROMPT
    SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=runout_state VALUE=1
  {% else %}
  {% endif %}

[gcode_macro _RUNOUT_PROMPT]
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin Filament Runout Detected"
  RESPOND TYPE=command MSG="action:prompt_text The print is paused. Press OKAY to unload."
  RESPOND TYPE=command MSG="action:prompt_footer_button Unload|_runout_unload_temp_check|primary" # Exit
  RESPOND TYPE=command MSG="action:prompt_footer_button Cancel Print|CANCEL_MACRO|warning" #CANCEL_PRINT
  RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _runout_unload_temp_check] 
# Because we called a prompt while the hotend is heated  we don't know how long it takes the user to interact
# Idle Timeout could have kicked in and the hotend could be cold. 
# So we need to double check the temps are good.
gcode:
  RESPOND TYPE=command MSG=action:prompt_end
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %} 
  M118 Filament Macros: Checking if extruder is ready...
  {% if (printer.extruder.target == 0) %}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp.current_load_temp}
    M118 Filament Macros: Hotend reheating!
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp.current_load_temp}
    M118 Filament Macros: Hotend ready! 
    _runout_unload
  {% else %} 
    _runout_unload
    M118 Filament Macros: Hotend is heated
  {% endif %}

[gcode_macro _runout_unload]
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLES'] %} 
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %}
  SET_GCODE_VARIABLE MACRO=_filament_load VARIABLE=loadbusy VALUE=1      
  {% if (user.enable_beep|lower == 'true') %} 
    M300 # beep sound
  {% endif %}
  M118 Filament Macros: Unloading filament...   
  M83
  G92 E0   
  {% if (printer.extruder.can_extrude|lower != 'true')%} # checking for minimum extrusion temperature
    # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
    M118 Filament Macros: Hotend heating!        
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp.temp.current_load_temp} # restore user temp if it was set before loading
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp.current_min_load_temp} #wait for reaching filament unload temp
  {% endif %}     
  {% if(printer.extruder.target == 0) %} # checing for set temperature if is zero than set to 200 / hotend hot but cooling due to set target temp 0
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp.current_load_temp} # restore user temp if it was set before loading
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp.current_min_load_temp} #wait for reaching filament unload temp
  {% endif %} 
  G0 E-5 F3600 	#extract filament to cold end
  G4 P2000 # wait for two seconds
  G0 E5 F3600 # push the filament back 
  G0 E-5 F3600 	#extract filament to cold end
  G0 E-{user.unload_distance} F300	# continue extraction slow allow filament to be cooled enough before reaches the gears  
  M400 #Wait for current moves to finish
  M118 Filament Macros: Load new filament! 
  {% if (user.shutdown_heater_runout|lower == 'true') %} # if true, the hotend heater will be set to zero immediately after the unload. Otherwise the printer will wait to idle timeout. 
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  {% endif %}
  # switch off heater
  UPDATE_DELAYED_GCODE ID=_clear_loadbusy DURATION=2.5 # timing must be set to clear delay plus 0.5s. is due to wait to remove filament before starting load even in case there is a blob at the tip of the extracted filament which would trigger the sensor twice
  _INSERT_NEW_PROMPT

[gcode_macro _INSERT_NEW_PROMPT]
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin Load New Filament"
  RESPOND TYPE=command MSG="action:prompt_text Insert new filament and press OKAY to load"
  RESPOND TYPE=command MSG="action:prompt_footer_button OKAY|_runout_load_temp_check|primary" # Load
  RESPOND TYPE=command MSG="action:prompt_footer_button CANCEL PRINT|CANCEL_MACRO|warning" # #CANCEL_PRINT
  RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _runout_load_temp_check] 
# Because we called a prompt while the hotend is heated  we don't know how long it takes the user to interact
# Idle Timeout could have kicked in and the hotend could be cold. 
# So we need to double check the temps are good.
gcode:
  RESPOND TYPE=command MSG=action:prompt_end
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %} 
  {% if (printer['filament_switch_sensor filament_sense'].filament_detected|lower == 'false')%} # Check if filament is acutally present
    M118 Filament Macros: No filament loaded  #test
    _INSERT_NEW_PROMPT # Go back a step
  {% elif (printer.extruder.target == 0) %}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp.current_load_temp}
    M118 Hotend reheating!
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp.current_load_temp}
    M118 Hotend ready!
    _runout_filament_load
  {% else %}
    _runout_filament_load
    M118 Hotend heated...
  {% endif %}

[gcode_macro _runout_filament_load]
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLES'] %}
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %}
  {% set load = printer['gcode_macro _filament_load'] %}
  {% if (printer.print_stats.state != "printing") %} #Make sure the printer is not printing (paused)
    {% if (printer['filament_switch_sensor SFS_T0_SWITCH'].filament_detected|lower == 'true')%} # We only want to load filament if the filament sensor reports true. This prevents a lot of problems :)
      {% if (user.paused_state == 1) %} # This might not be needed, but doesn't hurt. 
        {% if (load.loadbusy == 0) %} # This prevents activating _LOAD_PROMPT when taking out filament during unload.
          _filament_load
        {% endif %}
      {% endif %}
    {% else %}
      M118 Filament Macros: Cannot load when there is no filament inserted!
      _INSERT_NEW_PROMPT
    {% endif %}
  {% else %}    
    M118 Filament Macros: Printing! Can't load filament right now!    
  {% endif %} 
  UPDATE_DELAYED_GCODE ID=_clear_changebusy DURATION=2

# END FILAMENT RUNOUT
#########################################
# COLOR CHANGE

[gcode_macro M600] #test
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLES'] %}
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %}
  M118 Filament Macros: Color Change Started
  PAUSE # call printer pause macro      
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=color_change_state VALUE=1       
  M118 Filament Macros: Color Change Started
  {% if temp.current_load_temp == 0 %} # If we don't have the material temp stored, we grab the target extruder temp.
    SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=current_load_temp VALUE={printer.extruder.target}
    SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=current_min_load_temp VALUE={printer.extruder.target}
  {% endif %} 
  _COLOR_PROMPT
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=runout_state VALUE=1

[gcode_macro _COLOR_PROMPT]
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin Color Change"
  RESPOND TYPE=command MSG="action:prompt_text Press OKAY to unload filament."
  RESPOND TYPE=command MSG="action:prompt_footer_button OKAY|_COLOR_CHANGE|primary"
  RESPOND TYPE=command MSG="action:prompt_footer_button CANCEL|CANCEL_MACRO|warning" 
  RESPOND TYPE=command MSG="action:prompt_show" 

[gcode_macro _COLOR_CHANGE] 
gcode:
  RESPOND TYPE=command MSG=action:prompt_end
  M118 Filament Macros: Color Change Started
  _runout_unload_temp_check
    
# END COLOR CHANGE
##########################################################
# PAUSE RESUME CANCEL

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE

gcode:  
  {% set user = printer['gcode_macro _USER_VARIABLES'] %}  
  {% set x = params.X|default(user.park_position_x) %}   
  {% set y = params.Y|default(user.park_position_y) %}   
  {% set z = params.Z|default(user.park_lift_z)|float %} 
  {% set e = params.E|default(user.park_retraction) %}   
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
    {% set z_safe = lift_z %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=bed_restore_temp VALUE={printer.heater_bed.target} # Store the current bed temp
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extruder_restore_temp VALUE={printer.extruder.target} # Store the current hotend temp
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 E-{e} F2100
  G1 Z{z_safe}
  G90
  G1 X{x} Y{y} F6000
  M400 #Wait for current moves to finish
  {% if runout_state == 1 %}
    _RUNOUT_PROMPT
  {% endif %}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=paused_state VALUE=1
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=disable_autounload VALUE=False

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_bed_restore_temp:0
variable_extruder_restore_temp:0
gcode:
  ##### set defaults #####
  {% set user = printer['gcode_macro _USER_VARIABLES'] %} 
  M118 Filament Macros: Restoring heaters temperature.
  M140 S{bed_restore_temp}
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_restore_temp}
  M104 S{extruder_restore_temp}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_restore_temp}
  {% set e = params.E|default(user.park_retraction) %} 
  G91
  G1 E{e} F2100
  G90    
  RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=runout_state VALUE=0 # When we resume we need to zero out the runout state, as it has been resolved.
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=paused_state VALUE=0 # When we resume we need to zero the pause state. This gets triggered every time a print is resumed.
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=disable_autounload VALUE=True
  BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=runout_state VALUE=0 # If we cancel the printer, we need to reset these variables. 
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=paused_state VALUE=0
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=disable_autounload VALUE=True
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  BASE_CANCEL_PRINT

[gcode_macro CANCEL_MACRO]
gcode:
  RESPOND TYPE=command MSG=action:prompt_end
  CANCEL_PRINT
  M118 Print cancelled

# END PAUSE RESUME CANCEL
#####################################
# BUSY MACROS

[delayed_gcode _clear_unloadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=_filament_unload VARIABLE=unloadbusy VALUE=0
  #M118 Clear Unload busy! 

[delayed_gcode _clear_changebusy]
gcode:
  SET_GCODE_VARIABLE MACRO=_runout_change_start VARIABLE=changebusy VALUE=0
  #M118 Clear Load busy!  

[delayed_gcode _clear_loadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=_filament_load VARIABLE=loadbusy VALUE=0
  #M118 Clear Load busy!  

# END BUSY MACROS
##########################################
# PROMPTS


# END PROMPTS #

#########  I don't think these are used any more...  Leaving them here just in case. ##############################
#                                                                                                                 #
# [gcode_macro RESTORE_PROMPT]                                                                                    #
# gcode:                                                                                                          #
#   RESPOND TYPE=command MSG="action:prompt_begin Filament Loaded"                                                #
#   RESPOND TYPE=command MSG="action:prompt_text Press OKAY to resume print."                                     #
#   RESPOND TYPE=command MSG="action:prompt_footer_button RESUME |RESUME_RUNOUT|primary" # Load                   #
#   RESPOND TYPE=command MSG="action:prompt_footer_button CANCEL PRINT|CANCEL_MACRO|warning" # #CANCEL_PRINT      #
#   RESPOND TYPE=command MSG="action:prompt_show"                                                                 #
#                                                                                                                 #
# [gcode_macro NO_FILAMENT_PROMPT]                                                                                #
# gcode:                                                                                                          #
#   RESPOND TYPE=command MSG="action:prompt_begin No Filament Detected"                                           #
#   RESPOND TYPE=command MSG="action:prompt_text Please insert filament and press OKAY"                           #
#   RESPOND TYPE=command MSG="action:prompt_footer_button OKAY|_runout_load_temp_check|primary" # Next            #
#   RESPOND TYPE=command MSG="action:prompt_footer_button CANCEL|CANCEL_MACRO|warning" #CANCEL_PRINT              #
#   RESPOND TYPE=command MSG="action:prompt_show"                                                                 #
#                                                                                                                 #
# [gcode_macro RESUME_READY]                                                                                      #
# gcode:                                                                                                          #
#   RESPOND TYPE=command MSG="action:prompt_begin Filament Loaded"                                                #
#   RESPOND TYPE=command MSG="action:prompt_text Press OKAY to resume print"                                      #
#   RESPOND TYPE=command MSG="action:prompt_footer_button Okay|_UNLOAD_FINAL|primary"                             #
#   RESPOND TYPE=command MSG="action:prompt_footer_button Cancel|CANCEL_MACRO|warning" #CANCEL_PRINT              #
#   RESPOND TYPE=command MSG="action:prompt_show"                                                                 #
# [gcode_macro RUNOUT_STAGE] # This runs between _RUNOUT_PROMPT and _INSERT_NEW_PROMPT                            #
# gcode:                                                                                                          #
#   RESPOND TYPE=command MSG=action:prompt_end # Close the prompt                                                 #
#   # Yea, this is just an info box.                                                                              #
#                                                                                                                 #
# [gcode_macro RESUME_STAGE] # This runs between _RUNOUT_PROMPT and _INSERT_NEW_PROMPT                            #
# gcode:                                                                                                          #
#   RESPOND TYPE=command MSG=action:prompt_end # Close the prompt                                                 #
#   RESUME                                                                                                        #
#   M118 Print resuming...                                                                                        #
#                                                                                                                 #
# [gcode_macro FILAMENT_LOAD_STAGE] # This runs between _RUNOUT_PROMPT and _INSERT_NEW_PROMPT                     #
# gcode:                                                                                                          #
#   RESPOND TYPE=command MSG=action:prompt_end # Close the prompt                                                 #
#   _filament_load                                                                                                #
#                                                                                                                 #
###################################################################################################################